
    # Mit Supabase anmelden
    try:
        result = supabase.auth.sign_in_with_password({"email": email, "password": password})
            # JWT-Token erstellen
        access_token = create_access_token(identity=email)
        response = make_response(jsonify(access_token=access_token), 200)
        # Token im Cookie speichern
        response.set_cookie('access_token', access_token, httponly=True)
        return response
    except Exception as e:
        return jsonify(e), 500


         try:
        email = request.json.get('email')
        password = request.json.get('password')
    except Exception as e:
        print(e)

    try:
        result = supabase.auth.sign_in_with_password({"email": email, "password": password})
        access_token = create_access_token(identity=email)
        return jsonify(access_token=access_token), 200
    except Exception as e:
        if 'Invalid login credentials' in str(e):
            return jsonify({"status": {"code": 401, "message": "Unauthorized - invalid login credentials"}}), 401
        return jsonify({"status": {"code": 500, "message": "Unexpected Error - please try again"}}), 401






        {
    "access_token": "eyJhbGciOiJIUzI1NiIsImtpZCI6Inh3dERYZkVad3RUdTlQZWQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNzA4MDg2NjAwLCJpYXQiOjE3MDgwODMwMDAsImlzcyI6Imh0dHBzOi8veW5iZmhuemFtZG5xdXh4ZG9pdWUuc3VwYWJhc2UuY28vYXV0aC92MSIsInN1YiI6IjgyZDAyYjJmLWZkYmItNGNkNy1iYjI0LWU0MjJlYTViNzdkMCIsImVtYWlsIjoiMTk5OWVtbWVuZWdnZXJAZ21haWwuY29tIiwicGhvbmUiOiIiLCJhcHBfbWV0YWRhdGEiOnsicHJvdmlkZXIiOiJlbWFpbCIsInByb3ZpZGVycyI6WyJlbWFpbCJdfSwidXNlcl9tZXRhZGF0YSI6e30sInJvbGUiOiJhdXRoZW50aWNhdGVkIiwiYWFsIjoiYWFsMSIsImFtciI6W3sibWV0aG9kIjoicGFzc3dvcmQiLCJ0aW1lc3RhbXAiOjE3MDgwNzM5MTN9XSwic2Vzc2lvbl9pZCI6IjE4MDQ5OTJjLWQ1YjEtNDViOS1iZmRjLWQ2NThhZDY5ZjIyNiJ9.wIH5MS38ezp0EH7d0qvkK7vikaIHq0HMASSL89EhTbo",
    "token_type": "bearer",
    "expires_in": 3600,
    "expires_at": 1708086600,
    "refresh_token": "4ff12EymaHsL1awhG05keQ",
    "user": {
        "id": "82d02b2f-fdbb-4cd7-bb24-e422ea5b77d0",
        "aud": "authenticated",
        "role": "authenticated",
        "email": "1999emmenegger@gmail.com",
        "email_confirmed_at": "2024-02-14T16:13:57.873335Z",
        "phone": "",
        "confirmation_sent_at": "2024-02-14T16:13:38.796537Z",
        "confirmed_at": "2024-02-14T16:13:57.873335Z",
        "last_sign_in_at": "2024-02-16T11:29:40.207404Z",
        "app_metadata": {
            "provider": "email",
            "providers": [
                "email"
            ]
        },
        "user_metadata": {},
        "identities": [
            {
                "identity_id": "e70d3288-5ae0-4dc0-b5aa-721b8aecd433",
                "id": "82d02b2f-fdbb-4cd7-bb24-e422ea5b77d0",
                "user_id": "82d02b2f-fdbb-4cd7-bb24-e422ea5b77d0",
                "identity_data": {
                    "email": "1999emmenegger@gmail.com",
                    "email_verified": false,
                    "phone_verified": false,
                    "sub": "82d02b2f-fdbb-4cd7-bb24-e422ea5b77d0"
                },
                "provider": "email",
                "last_sign_in_at": "2024-02-14T16:13:38.795081Z",
                "created_at": "2024-02-14T16:13:38.795127Z",
                "updated_at": "2024-02-14T16:13:38.795127Z",
                "email": "1999emmenegger@gmail.com"
            }
        ],
        "created_at": "2024-02-14T16:13:38.792508Z",
        "updated_at": "2024-02-16T11:30:00.95725Z"
    }
}